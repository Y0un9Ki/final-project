# Generated by Django 5.0.6 on 2024-05-18 18:42

import user.manager
import user.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='Public identifier')),
                ('email', models.EmailField(error_messages={'unique': '이미 존재하는 이메일 입니다. 다른 이메일을 작성해주세요'}, max_length=254, unique=True)),
                ('username', models.CharField(max_length=20, validators=[user.validators.UnicodeUsernameValidator()])),
                ('birthday', models.DateField(null=True)),
                ('location', models.CharField(help_text={'message': '사는 곳을 꼭 입력해주세요'}, max_length=100)),
                ('number', models.CharField(help_text={'message': '휴대전화 번호를 정확히 입력해주세요'}, max_length=20, validators=[user.validators.UnicodeNumberValidator()])),
                ('point', models.PositiveIntegerField(blank=True, null=True)),
                ('update_date', models.DateTimeField(auto_now_add=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', user.manager.UserManager()),
            ],
        ),
    ]
